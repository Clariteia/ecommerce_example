[tool.poetry]
name = "product"
version = "0.1.0"
description = ""
authors = ["Clariteia Devs <devs@clariteia.com>"]
packages = [{ include = "src" }]

[tool.poetry.dependencies]
python = "^3.9"
minos-microservice-common = { path = "../../../minos-python/packages/core/minos-microservice-common", develop = true }
minos-microservice-transactions = { path = "../../../minos-python/packages/core/minos-microservice-transactions", develop = true }
minos-microservice-networks = { path = "../../../minos-python/packages/core/minos-microservice-networks", develop = true }
minos-microservice-aggregate = { path = "../../../minos-python/packages/core/minos-microservice-aggregate", develop = true }
minos-microservice-saga = { path = "../../../minos-python/packages/core/minos-microservice-saga", develop = true }
minos-microservice-cqrs = { path = "../../../minos-python/packages/core/minos-microservice-cqrs", develop = true }
minos-broker-kafka = { path = "../../../minos-python/packages/plugins/minos-broker-kafka", develop = true }
minos-discovery-minos = { path = "../../../minos-python/packages/plugins/minos-discovery-minos", develop = true }
minos-http-aiohttp = { path = "../../../minos-python/packages/plugins/minos-http-aiohttp", develop = true }
minos-database-aiopg = { path = "../../../minos-python/packages/plugins/minos-database-aiopg", develop = true }
minos-database-sqlalchemy = { path = "../../../minos-python/packages/plugins/minos-database-sqlalchemy", develop = true }
typer = "^0.3.2"
SQLAlchemy = "^1.4.37"
asyncpg = "^0.25.0"

[tool.poetry.dev-dependencies]
pytest = "^6.2.4"
black = "^19.10b"
isort = "^5.8.0"
flake8 = "^3.9.2"
coverage = "^5.5"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
microservice = "src.cli:main"