version: 2
name: user
aggregate:
  client: src.aggregates.CustomerAggregate
  publisher:
    client: minos.networks.TransactionalBrokerPublisher
    repository: minos.networks.DatabaseBrokerPublisherTransactionRepository
  entities:
    - src.aggregates.Customer
  repositories:
    transaction: minos.transactions.DatabaseTransactionRepository
    event: minos.aggregate.DatabaseDeltaRepository
    snapshot: minos.plugins.sqlalchemy.SqlAlchemySnapshotRepository
pools:
  lock: minos.common.DatabaseLockPool
  database: minos.common.DatabaseClientPool
  broker: minos.networks.BrokerClientPool
interfaces:
  broker:
    port: minos.networks.BrokerPort
    publisher:
      client: minos.plugins.kafka.KafkaBrokerPublisher
      queue: minos.networks.DatabaseBrokerPublisherQueue
    subscriber:
      client: minos.plugins.kafka.KafkaBrokerSubscriber
      queue: minos.networks.DatabaseBrokerSubscriberQueue
  http:
    port: minos.networks.HttpPort
    connector:
      client: minos.plugins.aiohttp.AioHttpConnector
      port: 8086
  periodic:
    port: minos.networks.PeriodicPort
routers:
  - minos.networks.BrokerRouter
  - minos.networks.PeriodicRouter
  - minos.networks.RestHttpRouter
middleware:
  - minos.saga.transactional_command
services:
  - minos.networks.SystemService
  - minos.aggregate.SnapshotService
  - minos.saga.SagaService
  - src.CustomerQueryService
  - src.CustomerCommandService
databases:
  default:
    client: minos.plugins.aiopg.AiopgDatabaseClient
    database: customer_db
    user: minos
    password: min0s
  snapshot:
    client: minos.plugins.sqlalchemy.SqlAlchemyDatabaseClient
    driver: postgresql+asyncpg
    database: customer_db
    user: minos
    password: min0s
    host: localhost
    port: 5432
saga:
  manager: minos.saga.SagaManager
discovery:
  connector: minos.networks.DiscoveryConnector
  client: minos.plugins.minos_discovery.MinosDiscoveryClient
